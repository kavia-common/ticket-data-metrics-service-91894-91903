plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.8'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
}

group = 'com.example'
version = '0.1.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// Apache POI for .xlsx parsing
	implementation 'org.apache.poi:poi-ooxml:5.3.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.17.0'
    // Prefer project-local config if present; otherwise fall back to Sun checks bundled with Checkstyle
    def localConfig = file("$rootDir/config/checkstyle/checkstyle.xml")
    config = localConfig.exists() ? resources.text.fromFile(localConfig) : resources.text.fromUri('https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/sun_checks.xml')
    ignoreFailures = true
    showViolations = true
}

tasks.withType(Checkstyle) {
    // Limit to main Java source set to avoid scanning build/generated
    source 'src/main/java'
    include '**/*.java'
    exclude '**/build/**'
}
